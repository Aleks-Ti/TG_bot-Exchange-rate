import logging
import os
from http import HTTPStatus
import requests
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv
import re
import json
import datetime as dt

load_dotenv()


logging.basicConfig(
    format='%(asctime)s - %(funcName)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename=os.path.join(os.path.dirname(__file__), 'program.log'),
    encoding='utf-8',
)

storage = MemoryStorage()
TELEGRAM_TOKEN = os.getenv('TOKEN')
TELEGRAM_CHAT_ID = os.getenv('CHAT_ID')

# RETRY_PERIOD = 10  # –ü–µ—Ä–∏–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è


bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot, storage=storage)


def get_api_answer_bit():
    """–ó–∞–ø—Ä–æ—Å –∫ Api –∫—É—Ä—Å–∞ –ë–ò–¢–ö–ê"""
    if (
        requests.get(
            'https://api.coindesk.com/v1/bpi/currentprice.json'
        ).status_code
        != HTTPStatus.OK
    ):
        logging.error('–°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!')
        raise ConnectionError('Service status != 200')
    try:
        return requests.get(
            'https://api.coindesk.com/v1/bpi/currentprice.json'
        ).json()
    except Exception:
        logging.exception('–ñ–û–ü–ê')


def get_api_answer_cb():
    """–ó–∞–ø—Ä–æ—Å –∫ Api –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫–∞ –†–§"""
    if (
        requests.get('https://www.cbr-xml-daily.ru/daily_json.js').status_code
        != HTTPStatus.OK
    ):
        logging.error('–°–µ—Ä–≤–∏—Å –¶–ë –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!')
        raise ConnectionError('Service CB status != 200')
    try:
        return requests.get(
            'https://www.cbr-xml-daily.ru/daily_json.js'
        ).json()
    except Exception:
        logging.exception('–ñ–û–ü–ê –≤ –¶–ë')


def parse_data_cb(data: dict) -> str:
    """–†–∞—Å–ø–∞—Ä—Å json –¶–ë()."""
    if 'Valute' in data:
        —Åurrency = data['Valute']

        currency_VND_name = —Åurrency['VND']['Name']
        currency_VND_now = —Åurrency['VND']['Value']

        currency_GBP_name = —Åurrency['GBP']['Name']
        currency_GBP_now = —Åurrency['GBP']['Value']

        currency_USD_name = —Åurrency['USD']['Name']
        currency_USD_now = —Åurrency['USD']['Value']

        currency_EUR_name = —Åurrency['EUR']['Name']
        currency_EUR_now = —Åurrency['EUR']['Value']

        currency_CNY_name = —Åurrency['CNY']['Name']
        currency_CNY_now = —Åurrency['CNY']['Value']
        message = (
            f'–í—ã—è—Å–Ω–∏–ª üßë‚Äçüíª:\n'
            f'{currency_USD_name}. –°—Ç–æ–∏–º–æ—Å—Ç—å: {currency_USD_now}.\n'
            f'{currency_EUR_name}. –°—Ç–æ–∏–º–æ—Å—Ç—å: {currency_EUR_now}.\n'
            f'{currency_CNY_name}. –°—Ç–æ–∏–º–æ—Å—Ç—å: {currency_CNY_now}.\n'
            f'{currency_GBP_name}. –°—Ç–æ–∏–º–æ—Å—Ç—å: {currency_GBP_now}.\n'
            f'{currency_VND_name}.ü§£ –°—Ç–æ–∏–º–æ—Å—Ç—å: {currency_VND_now}.üò≥\n'
        )
        return message
    logging.error('–ò–∑–º–µ–Ω–∏–ª—Å—è json –ø–æ–ª—É—á–∞–µ–º—ã–π –æ—Ç API.')
    raise Exception('–ñ–æ–ø–∞ –¶–ë')


def parse_data_bt(data: dict) -> str:
    """–†–∞—Å–ø–∞—Ä—Å json –±–∏—Ç–∫–∞()."""
    try:
        now_time = data['time']['updated']
        currency_name = data['chartName']
        usd_currency_price = data['bpi']['USD']['rate']
        eur_currency_price = data['bpi']['EUR']['rate']

        message = (
            f'–ù–∞ —Å–µ–≥–æ–¥–Ω—è - {now_time} —Å—Ç–æ–∏–º–æ—Å—Ç—å {currency_name} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: \n'
            f'USD - {usd_currency_price}.\nEUR - {eur_currency_price} '
        )
        return message
    except Exception:
        logging.exception('–ß–µ-—Ç–æ —Å —Ä–∞—Å–ø–∞—Ä—Å–æ–º json Bitcoin')


@dp.message_handler(commands=['kurs'])
async def send_message_(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–∞–ª—é—Ç."""
    chat_id = message.from_user.id
    data = get_api_answer_cb()
    text = parse_data_cb(data)

    await bot.send_message(chat_id=chat_id, text=text)


@dp.message_handler(commands=['bit'])
async def send_message(
    message: types.Message,
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ –±–∏—Ç–∫–∞."""
    chat_id = message.from_user.id
    data = get_api_answer_bit()
    text = parse_data_bt(data)

    await bot.send_message(chat_id=chat_id, text=text)


@dp.message_handler(commands=['*'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton(text='/bit')
    button_1 = types.KeyboardButton(text='/kurs')
    keyboard.add(button, button_1)

    await message.reply(
        '–ü—Ä–∏–≤–µ—Ç!\n–ò–Ω—Ñ–∞ –ø–æ –±–∏—Ç–∫—É ü§û -–∂–º–∏-> /bit'
        '\n–ò–Ω—Ñ–∞ –ø–æ –≥–æ—Å.–≤–∞–ª—é—Ç–∞–º –∫ —Ä—É–±–ª—é üí∏ -> /kurs'
        '\n–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É üëáü•∂üëá',
        reply_markup=keyboard,
    )


FILE_PATH = "projectK/links.json"


@dp.message_handler()
async def handle_all_messages(message: types.Message):
    """–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å—Å—ã–ª–∫–∞, —Ç–æ..."""
    if links := re.findall(
        r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+',
        message.text,
    ):
        save_links(message.message_id, links)
        await message.reply("–ó–∞—Ö–∞–≤–∞–ª!")


def save_links(message_id, links):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª."""
    try:
        with open(FILE_PATH, 'r') as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {}

    data[str(dt.date.today())] = links

    with open(FILE_PATH, 'w') as file:
        json.dump(data, file)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
